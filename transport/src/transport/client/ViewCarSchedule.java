/*
 * ViewCarSchedule.java
 *
 * Created on June 30, 2004, 1:14 AM
 */

package transport.client;

import javax.swing.*;
import java.awt.*;
import transport.logic.Car;
import transport.server.CarFactory;
import java.awt.event.*;
import transport.client.tablemodel.ViewTransportByFunctionaryTableModel;
import transport.client.tablemodel.ViewTransportByCarTableModel;

/**
 *
 * @author  sessan
 */
public class ViewCarSchedule
    extends javax.swing.JInternalFrame {
  private Car[] rowData;
  private CarFactory cf;
  private javax.swing.JTable objectTable;
  JPanel jPanel1 = new JPanel();
  afslComboBox comboSelectCar = new afslComboBox();
  JButton buttonClose = new JButton();
  GridLayout gridLayout1 = new GridLayout();
  ViewTransportByCarTableModel tableModelAll;
  ViewTransportByCarTableModel tableModelCurrent;
  ViewTransportByCarTableModel tableModelFuture;
  ViewTransportByCarTableModel tableModelFinished;
  /** Creates new form ViewFunctionarySchedule */
  JTabbedPane jTabbedPane1 = new JTabbedPane();
  JTable objectTableAll;
  JTable objectTableCurrent;
  JTable objectTableFuture;
  JTable objectTableFinished;
  JScrollPane paneShowAll= new JScrollPane();
  JScrollPane panelShowCurrent = new JScrollPane();
  JScrollPane oaneShowFuture = new JScrollPane();
  JScrollPane paneShowFinished = new JScrollPane();

  /** Creates new form ViewCarSchedule */
  public ViewCarSchedule() {
    cf = new CarFactory();
    rowData = cf.getAllCars();
    jbInit();

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void jbInit() { //GEN-BEGIN:jbInit
     this.setTitle("View Schedule By Car");
    ImageIcon frameIcon = new ImageIcon(this.getClass().getResource(
        "../pics/miniAF.png"));
    this.setFrameIcon(frameIcon);
    this.setResizable(true);
    this.setMinimumSize(new Dimension(30, 26));
    this.setPreferredSize(new Dimension(400, 400));

    pack();
    buttonClose.setText("Close");
    buttonClose.addActionListener(new ViewCarSchedule_buttonClose_actionAdapter(this));
    jPanel1.setLayout(gridLayout1);
    comboSelectCar.addActionListener(new ViewCarSchedule_comboSelectCar_actionAdapter(this));
    this.getContentPane().add(jPanel1, BorderLayout.NORTH);
    jPanel1.add(comboSelectCar, null);
    this.getContentPane().add(buttonClose, BorderLayout.SOUTH);
    comboSelectCar.fillCombo(rowData);
    if(comboSelectCar.getCount()>0){
      initTableAll();
      initTableCurrent();
      initTableFuture();
      initTableFinished();
    }
   paneShowAll.setViewportView(objectTableAll);
   panelShowCurrent.setViewportView(objectTableCurrent);
   paneShowFinished.setViewportView(objectTableFinished);
   oaneShowFuture.setViewportView(objectTableFuture);
   jTabbedPane1.add(panelShowCurrent, "Current");
   jTabbedPane1.add(oaneShowFuture,  "Future");
   jTabbedPane1.add(paneShowFinished,  "Finished");
   jTabbedPane1.add(paneShowAll, "All");
  }

  void buttonClose_actionPerformed(ActionEvent e) {
    this.dispose();
  } //GEN-END:jbInit

  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  private void initTableAll() {
    tableModelAll=null;
    objectTableAll = new javax.swing.JTable();
    objectTableAll.setRowSelectionAllowed(true);
    objectTableAll.setCellSelectionEnabled(false);
    objectTableAll.setColumnSelectionAllowed(false);
    tableModelAll=new ViewTransportByCarTableModel(getCurrentCarID());
    objectTableAll.setModel(tableModelAll);
    objectTableAll.setCellSelectionEnabled(true);
    objectTableAll.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    objectTableAll.setCellSelectionEnabled(false);
    setClosable(true);
    this.setMaximizable(true);
    setResizable(true);
    setAutoscrolls(true);
    this.getContentPane().add(jTabbedPane1, BorderLayout.CENTER);
    paneShowAll.setViewportView(objectTableAll);
  }
  private void initTableCurrent() {
    objectTableCurrent = new javax.swing.JTable();
    objectTableCurrent.setRowSelectionAllowed(true);
    objectTableCurrent.setCellSelectionEnabled(false);
    objectTableCurrent.setColumnSelectionAllowed(false);
    tableModelCurrent=new ViewTransportByCarTableModel();
    tableModelCurrent.setRowDataCurrent(getCurrentCarID());
    objectTableCurrent.setModel(tableModelCurrent);
    objectTableCurrent.setCellSelectionEnabled(true);
    objectTableCurrent.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    objectTableCurrent.setCellSelectionEnabled(false);
    setClosable(true);
    this.setMaximizable(true);
    setResizable(true);
    setAutoscrolls(true);
    this.getContentPane().add(jTabbedPane1, BorderLayout.CENTER);
    panelShowCurrent.setViewportView(objectTableCurrent);
  }

  private void initTableFuture() {
      objectTableFuture = new javax.swing.JTable();
      objectTableFuture.setRowSelectionAllowed(true);
      objectTableFuture.setCellSelectionEnabled(false);
      objectTableFuture.setColumnSelectionAllowed(false);
      tableModelFuture=new ViewTransportByCarTableModel();
      tableModelFuture.setRowDataFuture(getCurrentCarID());
      objectTableFuture.setModel(tableModelFuture);
      objectTableFuture.setCellSelectionEnabled(true);
      objectTableFuture.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      objectTableFuture.setCellSelectionEnabled(false);
      setClosable(true);
      this.setMaximizable(true);
      setResizable(true);
      setAutoscrolls(true);
      this.getContentPane().add(jTabbedPane1, BorderLayout.CENTER);
      oaneShowFuture.setViewportView(objectTableFuture);
    }

    private void initTableFinished() {
        objectTableFinished = new javax.swing.JTable();
        objectTableFinished.setRowSelectionAllowed(true);
        objectTableFinished.setCellSelectionEnabled(false);
        objectTableFinished.setColumnSelectionAllowed(false);
        tableModelFinished=new ViewTransportByCarTableModel();
        tableModelFinished.setRowDataFinished(getCurrentCarID());
        objectTableFinished.setModel(tableModelFinished);
        objectTableFinished.setCellSelectionEnabled(true);
        objectTableFinished.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        objectTableFinished.setCellSelectionEnabled(false);
        setClosable(true);
        this.setMaximizable(true);
        setResizable(true);
        setAutoscrolls(true);
        this.getContentPane().add(jTabbedPane1, BorderLayout.CENTER);
        paneShowFinished.setViewportView(objectTableFinished);
      }

  private int getCurrentCarID() {
    return ( (Car) comboSelectCar.
               getSelectedItem()).getId();
   }

  void comboSelectCar_actionPerformed(ActionEvent e) {
    initTableAll();
    initTableCurrent();
    initTableFinished();
    initTableFuture();
  }



}

class ViewCarSchedule_buttonClose_actionAdapter
    implements java.awt.event.ActionListener {
  ViewCarSchedule adaptee;

  ViewCarSchedule_buttonClose_actionAdapter(ViewCarSchedule adaptee) {
    this.adaptee = adaptee;
  }

  public void actionPerformed(ActionEvent e) {
    adaptee.buttonClose_actionPerformed(e);
  }
}

class ViewCarSchedule_comboSelectCar_actionAdapter implements java.awt.event.ActionListener {
  ViewCarSchedule adaptee;

  ViewCarSchedule_comboSelectCar_actionAdapter(ViewCarSchedule adaptee) {
    this.adaptee = adaptee;
  }
  public void actionPerformed(ActionEvent e) {
    adaptee.comboSelectCar_actionPerformed(e);
  }
}