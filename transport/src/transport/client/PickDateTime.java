/*
 * PickDateTime.java
 *
 * Created on June 18, 2004, 7:23 PM
 */

package transport.client;

import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author  ola
 */
public class PickDateTime extends javax.swing.JPanel {

	private DateTableModel table;

	public PickDateTime() {
		this(Calendar.getInstance());
	}

	/** Creates new form PickDateTime */
	public PickDateTime(Calendar cal) {
		jbInit();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
        private void jbInit() {//GEN-BEGIN:jbInit
                jPanel1 = new javax.swing.JPanel();
                prevMonth = new javax.swing.JLabel();
                prevDay = new javax.swing.JLabel();
                dateLabel = new javax.swing.JLabel();
                nextDay = new javax.swing.JLabel();
                nextMonth = new javax.swing.JLabel();
                jPanel2 = new javax.swing.JPanel();
                jTable1 = new javax.swing.JTable();
                jPanel3 = new javax.swing.JPanel();

                setLayout(new java.awt.BorderLayout());

                setMinimumSize(new java.awt.Dimension(100, 100));
                setPreferredSize(new java.awt.Dimension(100, 156));
                prevMonth.setText("<<");
	prevMonth.addMouseListener(new PickDateTime_prevMonth_mouseAdapter(this));
	prevDay.addMouseListener(new PickDateTime_prevDay_mouseAdapter(this));
    nextDay.addMouseListener(new PickDateTime_nextDay_mouseAdapter(this));
    nextMonth.addMouseListener(new PickDateTime_nextMonth_mouseAdapter(this));
    okButton.setActionCommand("jButton1");
    okButton.setMnemonic('O');
    okButton.setText("OK");
    cancelButton.setMnemonic('C');
    cancelButton.setText("Cancel");
    cancelButton.addMouseListener(new PickDateTime_cancelButton_mouseAdapter(this));
    jPanel1.add(prevMonth);
	jPanel1.add(prevDay);
	jPanel1.add(dateLabel);
	jPanel1.add(nextMonth);
    jPanel1.add(nextDay, null);

                prevDay.setText("<");

                dateLabel.setText("YYYY-MM-DD");

                nextDay.setText(">");

                nextMonth.setText(">>");


                jPanel2.setLayout(new java.awt.BorderLayout());

                jTable1.setModel((table=new DateTableModel()));
                jTable1.setRowSelectionAllowed(false);
                jPanel2.add(jTable1, java.awt.BorderLayout.CENTER);
    jPanel2.add(jPanel3, BorderLayout.SOUTH);
    jPanel3.add(okButton, null);
    jPanel3.add(cancelButton, null);

                add(jPanel2, java.awt.BorderLayout.CENTER);

    jPanel2.add(jPanel1, BorderLayout.NORTH);


        }//GEN-END:jbInit


        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JLabel dateLabel;
        private javax.swing.JLabel prevMonth;
        private javax.swing.JLabel prevDay;
        private javax.swing.JLabel nextDay;
        private javax.swing.JLabel nextMonth;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JPanel jPanel2;
        private javax.swing.JPanel jPanel3;
        private javax.swing.JTable jTable1;
  JButton okButton = new JButton();
  JButton cancelButton = new JButton();
        // End of variables declaration//GEN-END:variables

	private class DateTableModel extends javax.swing.table.AbstractTableModel {
		private String data[][];
		private GregorianCalendar cal;

		DateTableModel() {
			this(null);
		}

		DateTableModel(Calendar cal) {
			Date time=null;

			if (cal==null) {
				cal=new GregorianCalendar(new Locale("sv"));
			}

			time=cal.getTime();

			fixMonth();

			cal.setTime(time);

			// FIXME: update table
		}

		public void incMonth() {
			cal.add(Calendar.MONTH,1);
			Date time=cal.getTime();
			fixMonth();
			cal.setTime(time);
			fireTableDataChanged();
		}

		public void decMonth() {
			cal.add(Calendar.MONTH,-1);
			Date time=cal.getTime();
			fixMonth();
			cal.setTime(time);
			fireTableDataChanged();
		}

		public void incDay() {
			// FIXME: optimise
			cal.add(Calendar.DATE,1);
			Date time=cal.getTime();
			fixMonth();
			cal.setTime(time);
			fireTableDataChanged();
		}

		public void decDay() {
			// FIXME: optimise
			cal.add(Calendar.DATE, -1);
			Date time=cal.getTime();
			fixMonth();
			cal.setTime(time);
			fireTableDataChanged();
		}

		private void fixMonth() {
			int i;
			data=new String[6][8];


			cal.set(Calendar.DATE, 1);
			//cal.setFirstDayOfWeek(Calendar.MONDAY);

			int row=1;
			int col;

			for (i=0; i < cal.getActualMaximum(Calendar.DATE); i++) {
				col=cal.get(Calendar.DAY_OF_WEEK);

				setValueAt(new String("" + (i + 1)), row, col);
				if (col == 7) {
					setValueAt(new String("" + cal.get(Calendar.WEEK_OF_YEAR)), row, 0);
					row++;
				}

				cal.add(Calendar.DATE, 1);
			}

		}

		public void addTableModelListener(javax.swing.event.TableModelListener l) {
		}

		public Class getColumnClass(int columnIndex) {
			return new String().getClass();
		}

		public int getColumnCount() {
			return 8;
		}

		public String getColumnName(int columnIndex) {
			//FIXME: add locale handling.
			switch (columnIndex) {
				case 0:
					return new String("Week");
				case 1:
					return new String("Monday");
				case 2:
					return new String("Tuesday");
				case 3:
					return new String("Wednesday");
				case 4:
					return new String("Thursday");
				case 5:
					return new String("Friday");
				case 6:
					return new String("Saturday");
				case 7:
					return new String("Sunday");
			}

			return "FAULT!";
		}

		public int getRowCount() {
			return 6;
		}

		public Object getValueAt(int rowIndex, int columnIndex) {
			return data[rowIndex][columnIndex];
		}

		public boolean isCellEditable(int rowIndex, int columnIndex) {
			return false;
		}

		public void removeTableModelListener(javax.swing.event.TableModelListener l) {
		}

		public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
			data[rowIndex][columnIndex]=(String)aValue;
		}

	}

    void prevMonth_mouseClicked(MouseEvent e) {
		table.decMonth();
    }

	void prevDay_mouseClicked(MouseEvent e) {
		table.decDay();
	}

	void nextDay_mouseClicked(MouseEvent e) {
		table.incDay();
	}

	void nextMonth_mouseClicked(MouseEvent e) {
		table.incMonth();
	}

	void cancelButton_mouseClicked(MouseEvent e) {
		this.hide();
	}
}

class PickDateTime_prevMonth_mouseAdapter extends java.awt.event.MouseAdapter {
    PickDateTime adaptee;

    PickDateTime_prevMonth_mouseAdapter(PickDateTime adaptee) {
	this.adaptee = adaptee;
    }
    public void mouseClicked(MouseEvent e) {
	adaptee.prevMonth_mouseClicked(e);
    }
}

class PickDateTime_prevDay_mouseAdapter extends java.awt.event.MouseAdapter {
  PickDateTime adaptee;

  PickDateTime_prevDay_mouseAdapter(PickDateTime adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.prevDay_mouseClicked(e);
  }
}

class PickDateTime_nextDay_mouseAdapter extends java.awt.event.MouseAdapter {
  PickDateTime adaptee;

  PickDateTime_nextDay_mouseAdapter(PickDateTime adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.nextDay_mouseClicked(e);
  }
}

class PickDateTime_nextMonth_mouseAdapter extends java.awt.event.MouseAdapter {
  PickDateTime adaptee;

  PickDateTime_nextMonth_mouseAdapter(PickDateTime adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.nextMonth_mouseClicked(e);
  }
}

class PickDateTime_cancelButton_mouseAdapter extends java.awt.event.MouseAdapter {
  PickDateTime adaptee;

  PickDateTime_cancelButton_mouseAdapter(PickDateTime adaptee) {
    this.adaptee = adaptee;
  }
  public void mouseClicked(MouseEvent e) {
    adaptee.cancelButton_mouseClicked(e);
  }
}

