/*
 * MultipleArtistChooser.java
 *
 * Created on June 28, 2004, 11:25 PM
 */

package transport.client;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/**
 *
 * @author  ola
 */
public class MultipleChooser extends javax.swing.JPanel {
	Object type;
	DefaultListModel listModel=new DefaultListModel();
	JWindow chooserWindow;
	ItemChooser chooser;

	public MultipleChooser() {
	}

	/** Creates new form MultipleArtistChooser */
	public MultipleChooser(Object type) {
		this(null, type);
	}

	public MultipleChooser(Object[] objects, Object type) {
		this.type=type;

		jbInit();

		if (objects != null) {
			for (int i=0; i < objects.length; i++) {
				listModel.addElement(objects[i]);
			}
		}
	}

	public void add(Object o) {
		listModel.addElement(o);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void jbInit() { //GEN-BEGIN:jbInit
		addObject=new javax.swing.JButton();
		objectsList=new javax.swing.JList();
		removeObject=new javax.swing.JButton();

		setLayout(borderLayout1);

		addObject.setHorizontalAlignment(SwingConstants.LEFT);
		addObject.setText("+");
		addObject.addActionListener(new ActionListener(this));

		objectsList.setBorder(BorderFactory.createLineBorder(Color.black));
		removeObject.addActionListener(new
			MultipleChooser_removeObject_actionAdapter(this));
		removeObject.setHorizontalAlignment(SwingConstants.RIGHT);

		jPanel1.setLayout(gridLayout1);
		gridLayout1.setColumns(1);
		gridLayout1.setRows(2);

		removeObject.setText("-");
		this.add(jPanel1, BorderLayout.EAST);
		jPanel1.add(addObject, null);
		jPanel1.add(removeObject, null);
    this.add(jScrollPane1, BorderLayout.CENTER);
    jScrollPane1.getViewport().add(objectsList, null);
		objectsList.setLayoutOrientation(JList.HORIZONTAL_WRAP);
		objectsList.setModel(listModel);
	} //GEN-END:jbInit

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton addObject;
	private javax.swing.JList objectsList;
	private javax.swing.JButton removeObject;
	BorderLayout borderLayout1=new BorderLayout();
	JPanel jPanel1=new JPanel();
	GridLayout gridLayout1=new GridLayout();
  JScrollPane jScrollPane1 = new JScrollPane();

	void addObject_actionPerformed(ActionEvent e) {
/*		Window w=(Window)this.getTopLevelAncestor();
		JWindow chooserWindow=new JWindow(w);
		JPanel contentPane=(JPanel)chooserWindow.getContentPane();
		contentPane.setLayout(new BorderLayout());
		contentPane.add(new ItemChooser(type));
		chooserWindow.show();*/


		if (chooserWindow == null) {
			Window w=(Window)this.getTopLevelAncestor();
			chooserWindow=new JWindow(w);
			JPanel contentPane=(JPanel)chooserWindow.getContentPane();
			contentPane.setLayout(new BorderLayout());
			chooser=new ItemChooser(type, this);
			contentPane.add(chooser);
			chooserWindow.pack();
			Point p=this.getLocationOnScreen();
			chooserWindow.setBounds((int)p.getX(),
									(int)p.getY() + this.getHeight(),
									300, 300);
		} else {
			chooser.refresh();
		}

		chooserWindow.setVisible(!chooserWindow.isVisible());
	}

	void removeObject_actionPerformed(ActionEvent e) {
		Object[] o=objectsList.getSelectedValues();

		for (int i=0;i<o.length;i++) {
			listModel.removeElement(o[i]);
		}
	}

	/**
	 * closeChooser
	 */
	public void closeChooser() {
		chooserWindow.setVisible(false);
	}

	public Object[] getObjects() {
		return listModel.toArray();
	}

	/**
	 * addObjects
	 *
	 * @param objects Object[]
	 */
	public void addObjects(Object[] objects) {
		for (int i=0; i < objects.length; i++) {
			add(objects[i]);
		}
	}
}

class ActionListener implements java.awt.event.ActionListener {
	MultipleChooser adaptee;

	ActionListener(MultipleChooser adaptee) {
		this.adaptee=adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.addObject_actionPerformed(e);
	}
}

class MultipleChooser_removeObject_actionAdapter implements java.awt.event.ActionListener {
  MultipleChooser adaptee;

  MultipleChooser_removeObject_actionAdapter(MultipleChooser adaptee) {
    this.adaptee = adaptee;
  }
  public void actionPerformed(ActionEvent e) {
    adaptee.removeObject_actionPerformed(e);
  }
}
